#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

#define VCS_RTLIB_TLS_MODEL  __attribute__((tls_model("initial-exec")))

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I696;
    RP  I697;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef U  InstNum;
typedef unsigned ProcessNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef struct {
    int * I698;
    int * I699;
    long long I700;
} TypeData;
struct etype {
    U  I582 :8;
    U  I583 :24;
    U  I584;
    U  I585 :1;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :1;
    U  I590 :1;
    U  I591 :1;
    U  I592 :1;
    U  I593 :1;
    U  I594 :4;
    U  I595 :1;
    U  I596 :1;
    U  I597 :1;
    U  I598 :1;
    U  I599 :1;
    U  I600 :1;
    U  I601 :1;
    U  I602 :1;
    U  I603 :2;
    U  I604 :1;
    U  I605 :2;
    U  I606 :1;
    U  I607 :1;
    U  I608 :1;
    U  I609 :1;
    U  I610 :1;
    U  I367 :1;
    U  I611;
    TypeData  * I612;
    U  I613;
    U  I614;
    U  I615 :1;
    U  I616 :1;
    U  I617 :1;
    U  I618 :1;
    U  I619 :2;
    U  I620 :2;
    U  I621 :1;
    U  I622 :1;
    U  I623 :1;
    U  I624 :1;
    U  I625 :1;
    U  I626 :1;
    U  I627 :1;
    U  I628 :1;
    U  I629 :1;
    U  I630 :15;
};
typedef union {
    double I707;
    unsigned long long I708;
    unsigned  I709[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    struct eblk * I716;
    E_fn  I717;
    struct iptmpl * I718;
    unsigned I720;
    unsigned I721;
    struct eblk * I722;
} eblk_struct;
typedef struct {
    RP  I716;
    RP  I717;
    RP  I718;
    unsigned I720;
    unsigned I721;
    RP  I722;
} RmaEblk;
typedef struct {
    RP  I716;
    RP  I717;
    RP  I718;
    unsigned I720;
    unsigned I721;
    RP  I722;
    unsigned val;
} RmaEblklq;
typedef union {
    double I707;
    unsigned long long I708;
    unsigned  I709[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I758;
    RmaEblk  I715;
    U  I760;
    US  I761 :1;
    US  I762 :4;
    US  I181 :2;
    US  state :2;
    US  I764 :1;
    US  I765 :2;
    US  I766 :2;
    US  fHsim :1;
    US  I565 :1;
    scalar  newval;
    scalar  I769;
    RP  I770;
};
struct retain_t {
    struct retain_t * I758;
    EBLK  I715;
    U  I760;
    US  I761 :1;
    US  I762 :4;
    US  I181 :2;
    US  state :2;
    US  I764 :1;
    US  I765 :2;
    US  I766 :2;
    US  fHsim :1;
    US  I767 :1;
    scalar  newval;
    scalar  I769;
    void * I770;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I749;
    scalar  I750;
    scalar  I751;
    scalar  I752;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I754;
    EBLK  I755;
    void * I756;
    UP   I757[1];
};
struct RmaMPSched {
    RP  I749;
    scalar  I750;
    scalar  I751;
    scalar  I752;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I754;
    RmaEblk  I755;
    RP  I756;
    RP   I757[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I749;
    scalar  I750;
    scalar  I751;
    scalar  I752;
    scalar  I181;
    U  I754;
    RmaEblk  I755;
    scalar  I766;
    scalar  I775;
    scalar  I776;
    scalar  I777;
    U  I778;
    RmaClockStruct  I779;
    RmaClockStruct  I780;
    U  state;
    U  I781;
    RP  I718;
    RP  I782;
    RP  I783;
    RP   I757[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I785;
    void * I786;
};
typedef struct {
    RmaEblk  I715;
    RP  I787;
    scalar  I788;
    scalar  I766;
    scalar  I789;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I749;
    scalar  I750;
    scalar  I751;
    scalar  I752;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I754;
    RmaEblk  I755;
    scalar  I766;
    scalar  I775;
    scalar  I776;
    scalar  I777;
    U  state :4;
    U  I791 :28;
    RmaClockStruct  I779;
    RmaClockStruct  I780;
    RP  I792;
    RP  I718;
    RP  I793;
    RP   I757[1];
};
typedef struct red_t {
    U  I794;
    U  I795;
    U  I675;
} RED;
typedef struct predd {
    PD_e  I181;
    RED   I796[0];
} PREDD;
union rhs_value {
    vec32  I797;
    scalar  I788;
    vec32  * I766;
    double I798;
    U  I799;
};
typedef struct nbs_t {
    struct nbs_t * I800;
    struct nbs_t * I802;
    void (* I803)(struct nbs_t * I770);
    U  I804 :1;
    U  I805 :1;
    U  I806 :1;
    U  I807 :1;
    U  I808 :1;
    U  I809 :1;
    U  I810 :26;
    U  I811;
    void * I812;
    union rhs_value I813;
    vec32  I707;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I815;
} NBS;
typedef struct {
    RP  I816;
    RP  I782;
    RP  I718;
    RP  I783;
    RmaEblk  I715;
    RmaEblk  I817;
    RP  I818;
    scalar  I788;
    scalar  I766;
    char state;
    uscope_t  I819;
    U  I820;
    RP  I821;
    scalar  I775;
    scalar  I776;
    scalar  I777;
    RmaClockStruct  I779;
    RmaClockStruct  I780;
    RP  I756;
} RmaPulse;
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I825 :1;
    U  I826 :1;
    U  I827 :1;
    U  I828 :1;
    U  I829 :1;
    U  I830 :1;
    U  I831 :1;
    U  I832 :1;
    U  I833 :1;
    U  I834 :1;
    U  I835 :1;
    U  I836 :1;
    U  I837 :1;
    U  I838 :1;
    U  I839 :1;
    U  I840 :1;
    U  I841 :1;
    U  I842 :1;
    QIRDModuleType  I843 :2;
    U  I844 :1;
    U  I845 :1;
    U  I846 :1;
    U  I847 :1;
    U  I848 :1;
    U  I849 :1;
    U  I850 :1;
    U  I851 :1;
    U  I852 :1;
    U  I853 :1;
    U  I854 :1;
    U  I855 :1;
    U  I856 :1;
    U  I857 :1;
    U  I858 :1;
    U  I859 :1;
    U  I860 :1;
    U  I861 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    U  I20;
    U  I21;
    U  * I22;
    U  * I23;
    void * I24;
    void * I25;
    U  I26;
    int I27;
    UP  I28;
    U  I29;
    U  I30;
    U  I31;
    UP  I32;
    U  * I33;
    UP  I34;
    U  I35;
    BitFlags  I36;
    U  I37;
    U  I38;
    U  I39;
    U  I40;
    U  I41;
    U  * I42;
    U  I43;
    U  * I44;
    U  I45;
    U  I46;
    U  I47;
    U  I48;
    U  I49;
    U  I50;
    U  I51;
    U  * I52;
    U  * I53;
    U  I54;
    U  I55;
    U  * I56;
    U  I57;
    U  * I58;
    U  I59;
    U  I60;
    U  I61;
    U  I62;
    U  * I63;
    U  I64;
    U  * I65;
    U  I66;
    U  I67;
    U  I68;
    U  I69;
    U  I70;
    U  I71;
    U  * I72;
    char * I73;
    U  I74;
    U  I75;
    U  I76;
    U  I77;
    U  I78;
    U  * I79;
    U  I80;
    U  I81;
    U  I82;
    UP  * I83;
    U  I84;
    U  I85;
    U  I86;
    U  I87;
    U  I88;
    U  I89;
    U  * I90;
    U  I91;
    U  I92;
    U  * I93;
    U  * I94;
    U  * I95;
    U  * I96;
    U  * I97;
    U  I98;
    U  I99;
    struct taskInfo * I100;
    U  I102;
    U  I103;
    U  I104;
    int * I105;
    U  * I106;
    UP  * I107;
    U  * I108;
    U  I109;
    U  I110;
    U  I111;
    U  I112;
    U  I113;
    struct qrefer * I114;
    U  * I116;
    unsigned * I117;
    void * I118;
    U  I119;
    U  I120;
    struct classStaticReferData * I121;
    U  I123;
    U  * I124;
    U  I125;
    U  * I126;
    U  I127;
    struct wakeupInfoStruct * I128;
    U  I130;
    U  I131;
    U  I132;
    U  * I133;
    U  I134;
    U  * I135;
    U  I136;
    U  I137;
    U  I138;
    U  * I139;
    U  I140;
    U  * I141;
    U  I142;
    U  I143;
    U  * I144;
    U  I145;
    U  I146;
    U  * I147;
    U  * I148;
    U  * I149;
    U  I150;
    U  I151;
    U  I152;
    U  I153;
    U  I154;
    struct qrefee * I155;
    U  * I157;
    U  I158;
    struct qdefrefee * I159;
    U  * I161;
    int (* I162)(void);
    char * I163;
    U  I164;
    U  I165;
    void * I166;
    void * I167;
    NumLibs_t  I168;
    char * I169;
    U  * I170;
    U  I171;
    U  I172;
    U  I173;
    U  I174;
    U  I175;
    U  * I176;
    U  * I177;
    int I178;
    struct clock_load * I179;
    int I194;
    struct clock_data * I195;
    int I211;
    struct clock_hiconn * I212;
    U  I216;
    U  I217;
    U  I218;
    U  I219;
    U  * I220;
    U  * I221;
    U  I222;
    void * I223;
    U  I224;
    U  I225;
    UP  * I226;
    void * I227;
    U  I228;
    UP  * I229;
    U  * I230;
    int (* I231)(void);
    U  * I232;
    UP  * I233;
    U  * I234;
    U  I235 :1;
    U  I236 :31;
    U  I237;
    U  I238;
    UP  * I239;
    U  * I240;
    U  I241 :1;
    U  I242 :1;
    U  I243 :1;
    U  I244 :1;
    U  I245 :28;
    U  I246;
    U  I247;
    U  I248;
    U  I249 :31;
    U  I250 :1;
    UP  * I251;
    UP  * I252;
    U  * I253;
    U  * I254;
    U  * I255;
    UP  * I256;
    UP  * I257;
    UP  * I258;
    U  * I259;
    UP  * I260;
    UP  * I261;
    UP  * I262;
    UP  * I263;
    char * I264;
    U  I265;
    U  I266;
    U  I267;
    UP  * I268;
    U  I269;
    UP  * I270;
    UP  * I271;
    UP  * I272;
    UP  * I273;
    UP  * I274;
    UP  * I275;
    UP  * I276;
    UP  * I277;
    UP  * I278;
    UP  * I279;
    UP  * I280;
    UP  * I281;
    UP  * I282;
    UP  * I283;
    U  * I284;
    U  * I285;
    UP  * I286;
    U  I287;
    U  I288;
    U  I289;
    U  I290;
    U  I291;
    U  I292;
    U  I293;
    U  I294;
    char * I295;
    U  * I296;
    U  I297;
    U  I298;
    U  I299;
    U  I300;
    U  I301;
    UP  * I302;
    UP  * I303;
    UP  * I304;
    UP  * I305;
    struct daidirInfo * I306;
    struct vcs_tftable * I308;
    U  I310;
    UP  * I311;
    UP  * I312;
    U  I313;
    U  I314;
    U  I315;
    UP  * I316;
    U  * I317;
    UP  * I318;
    UP  * I319;
    struct qird_hil_data * I320;
    UP  (* I322)(void);
    UP  (* I323)(void);
    UP  (* I324)(void);
    UP  (* I325)(void);
    UP  (* I326)(void);
    int * I327;
    int (* I328)(void);
    char * I329;
    UP  * I330;
    UP  * I331;
    UP  (* I332)(void);
    int (* I333)(void);
    int * I334;
    int (* I335)(void);
    int * I336;
    char * I337;
    U  * I338;
    U  * I339;
    U  * I340;
    U  * I341;
    void * I342;
    U  I343;
    void * I344;
    U  I345;
    U  I346;
    U  I347;
    U  I348;
    U  I349;
    U  I350;
    char * I351;
    UP  * I352;
    U  * I353;
    U  * I354;
    U  I355 :15;
    U  I356 :14;
    U  I357 :1;
    U  I358 :1;
    U  I359 :1;
    U  I360 :3;
    U  I361 :1;
    U  I362 :1;
    U  I363 :17;
    U  I364 :3;
    U  I365 :5;
    U  I366 :1;
    U  I367 :1;
    U  I368 :1;
    U  I369 :31;
    struct scope * I370;
    U  I372;
    U  I373;
    U  I374;
    U  * I375;
    U  * I376;
    U  * I377;
    U  I378;
    U  I379;
    U  I380;
    struct pcbt * I381;
    U  I391;
    U  I392;
    U  I393;
    U  I394;
    void * I395;
    void * I396;
    void * I397;
    int I398;
    U  * I399;
    U  I400;
    U  I401;
    U  I402;
    U  I403;
    U  I404;
    U  I405;
    U  I406;
    void * I407;
    UP  * I408;
    U  I409;
    U  I410;
    void * I411;
    U  I412;
    void * I413;
    U  I414;
    void * I415;
    U  I416;
    int (* I417)(void);
    int (* I418)(void);
    void * I419;
    void * I420;
    void * I421;
    U  I422;
    U  I423;
    U  I424;
    U  I425;
    U  I426;
    U  I427;
    char * I428;
    U  I429;
    U  * I430;
    U  I431;
    U  * I432;
    U  I433;
    U  I434;
    U  I435;
    U  I436;
    U  I437;
    U  I438;
    U  * I439;
    U  I440;
    U  I441;
    U  * I442;
    U  I443;
    U  I444;
    U  I445;
    U  * I446;
    char * I447;
    U  I448;
    U  I449;
    U  I450;
    U  I451;
    U  * I452;
    U  * I453;
    U  I454;
    U  * I455;
    U  * I456;
    U  I457;
    U  I458;
    U  I459;
    UP  * I460;
    U  I461;
    U  I462;
    U  I463;
    struct cosim_info * I464;
    U  I466;
    U  * I467;
    U  I468;
    void * I469;
    U  I470;
    U  * I471;
    U  I472;
    U  * I473;
    U  I474;
    U  I475;
    U  * I476;
    U  I477;
    U  * I478;
    U  I479;
    U  * I480;
    U  I481;
    U  I482;
    U  I483;
    U  I484;
    U  I485;
    U  I486;
    U  I487;
    U  I488;
    U  I489;
    U  * I490;
    U  * I491;
    void (* I492)(void);
    U  * I493;
    UP  * I494;
    struct mhdl_outInfo * I495;
    UP  * I497;
    U  I498;
    UP  * I499;
    U  I500;
    void * I501;
    U  * I502;
    void * I503;
    char * I504;
    int (* I505)(void);
    U  * I506;
    char * I507;
    char * I508;
    U  I509;
    U  * I510;
    char * I511;
    U  I512;
    struct regInitInfo * I513;
    UP  * I515;
    U  * I516;
    char * I517;
    U  I518;
    U  I519;
    U  I520;
    U  I521;
    U  I522;
    U  I523;
    U  I524;
    U  I525;
    UP  * I526;
    U  I527;
    U  I528;
    U  I529;
    U  I530;
    UP  * I531;
    U  I532;
    UP  * I533;
    U  I534;
    U  I535;
    U  I536;
    U  * I537;
    U  I538;
    U  I539;
    U  I540;
    U  * I541;
    U  * I542;
    UP  * I543;
    UP  * I544;
    void * I545;
    UP  I546;
    void * I547;
    void * I548;
    void * I549;
    void * I550;
    void * I551;
    UP  I552;
    U  * I553;
    U  * I554;
    void * I555;
    U  I556 :1;
    U  I557 :31;
    U  I558;
    U  I559;
    U  I560;
    int I561;
    U  I562 :1;
    U  I563 :1;
    U  I564 :1;
    U  I565 :29;
    void * I566;
    void * I567;
    void * I568;
    void * I569;
    void * I570;
    UP  * I571;
    U  * I572;
    U  I573;
    char * I574;
    U  * I575;
    U  * I576;
    char * I577;
    int * I578;
    UP  * I579;
    struct etype * I580;
    U  I631;
    U  I632;
    U  I633;
    U  * I634;
    void * I635;
    U  I636;
    U  I637;
    void * I638;
    U  I639;
    U  I640;
    U  * I641;
    U  * I642;
    char * I643;
    U  I644;
    struct covreg_rt * I645;
    U  I647;
    U  I648;
    U  * I649;
    U  I650;
    U  * I651;
    U  I652;
    U  I653;
    U  * I654;
};
typedef struct pcbt {
    U  * I383;
    UP  I384;
    U  I385;
    U  I386;
    U  I387;
    U  I388;
    U  I389;
    U  I390;
} PCBT;
struct iptmpl {
    QIRD  * I723;
    struct vcs_globals_t * I724;
    void * I726;
    UP  I727;
    UP  I728;
    struct iptmpl * I718[2];
};
typedef unsigned long long FileOffset;
typedef struct _RmaMultiInputTable {
    U  I868 :1;
    U  I869 :1;
    U  I662 :2;
    U  I663 :4;
    U  I664 :5;
    U  I870 :1;
    U  I871 :1;
    U  I872 :1;
    U  I873 :1;
    U  I874 :1;
    U  I875 :1;
    U  I876;
    U  I877;
    U  I203;
    U  I878;
    U  I879 :1;
    U  I880 :31;
    union {
        U  utable;
        U  edgeInputNum;
    } I689;
    U  I881 :4;
    U  I882 :4;
    U  I883 :4;
    U  I884 :4;
    U  I885 :4;
    U  I886 :4;
    U  I887 :1;
    U  I888 :1;
    U  I889 :1;
    U  I367 :5;
    HsimExprChar  * I890;
    UB  * I891;
    UB  * I892;
    struct _RmaMultiInputTable * I867;
    struct _RmaMultiInputTable * I894;
} RmaMultiInputTable;
typedef struct _HsCgPeriod {
    U  I940;
    U  I941;
} HsCgPeriod;
typedef struct {
    U   I942[2];
    U  I943 :1;
    U  I944 :1;
    U  I945 :8;
    U  I946 :8;
    U  I947 :8;
    U  I948 :4;
    U  I949 :1;
    U  I950 :1;
    unsigned long long I951;
    unsigned long long I952;
    unsigned long long I953;
    unsigned long long I954;
    unsigned long long I941;
    U  I940;
    U  I955;
    U  I956;
    U  I957;
    U  I958;
    U  I959;
    HsCgPeriod  * I960[10];
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I961;
    InstNum  I962;
    U  I900;
    scalar  I963;
    UB  I964;
    UB  I965;
    UB  I966;
    UB  I967;
    UB  I968;
    UB  I969;
    U  I970;
    U  I971;
    U  I972;
    U  I973;
    U  I974;
    U  I975;
    U  I976;
    U  I977;
    U  I978;
    HsimSignalMonitor  * I979;
    RP  I980;
    RmaTimeStamp64  I981;
    U  I982;
    RmaTimeStamp64  I983;
    U  I984;
    UB  I985;
} HsimNodeRecord;
typedef struct {
    RP  I986;
    RP  I718;
} RmaIbfIp;
typedef struct {
    RP  I986;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I715;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RO  I864;
    RP  pcode;
} SchedGateFanout;
typedef struct {
    RO  I864;
    RP  pcode;
    U   I921[4];
} SchedSelectGateFanout;
typedef struct {
    RP  pcode;
    RmaEblklq  I715;
} SchedGateEblk;
typedef struct {
    RP  pcode;
    RmaEblklq  I715;
    UB  * I987;
} SchedSelectGateEblk;
typedef struct {
    RP  I988;
    RP  pfn;
    RP  pcode;
} RmaSeqPrimOutputEblkData;
typedef struct {
    RmaEblk  I715;
    RP  I989;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I715;
    RP  I987;
    RP  I989;
    vec32  I990;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I715;
    RP  I987;
    RP  I989;
    vec32   I765[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I715;
    RP  I987;
    RP  I989;
    scalar   I991[1];
} RmaAnySchedECg;
typedef struct {
    U  I992;
    U  I703;
    U  I900;
    U  I993;
    RmaIbfIp  * I994;
    EBLK  I715;
    void * val;
} RmaThreadSchedCompiledLoads;
typedef struct {
    U  I703;
    U  I711;
    RmaThreadSchedCompiledLoads  * I995;
} RmaSchedCompileLoadsCg;
typedef struct {
    RP  I996;
} RmaRootCbkCg;
typedef struct {
    RP  I997;
} RmaRootVcdCg;
typedef struct {
    RP  I998;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I715;
    RP  I999;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I711 :30;
    U  I1000 :1;
    U  I1001 :1;
    vec32  I797;
    U  I1002;
    RP  I1003;
    RP  I1004;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I1010;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I658;
    RmaIbfPcode   I1010[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I1010;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I1011;
    U  I1012 :3;
    U  I1013 :1;
    U  I1014 :1;
    U  I877 :16;
} RmaNbaGateOfn;
typedef struct {
    U  I5;
    NBS  I1015;
    RmaIbfPcode  I1011;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct RmaSeqPrimOutputS_ RmaSeqPrimOutputOnClkS;
struct RmaSeqPrimOutputS_ {
    RP  pfn;
    RP  I1018;
    U  state;
    U  I1019;
    RP  I1020;
    U  I696;
    scalar  val;
};
typedef struct {
    U  I5;
    U  iinput;
    UB  I1022;
    RP  I1023;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    UB  I1022;
    RP  I1023;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I1024;
    UB  I1022;
    U  * I1025;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I1026;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I1026;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I715;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I715;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I715;
    RP  pcode;
    RP  pfn;
    scalar  I1027;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I1028;
    RP  I1029;
    RP  I1030;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I715;
    RP  pcode;
    U  I900;
    U   I704[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I796;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaGateDelay;
typedef struct {
    U  I5;
    RP  I796;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaGateBehavioralDelay;
typedef struct {
    U  I5;
    union {
        RP  I1254;
        RP  I1537;
        RP  I1551;
    } I770;
    RmaIbfPcode  I1011;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I1031;
    RmaIbfPcode  I1011;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I1011;
    RmaMps  I1032;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I1033;
    RmaIbfPcode  I1011;
    RmaEblk  I755;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I1011;
    RmaMpspNewCsdf  I1034;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I1034;
    RmaIbfPcode  I1011;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I5;
    RP  I675;
    RmaTransEventHdr  I906;
    RP  I793;
    RmaIbfPcode  I1011;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I5;
    U  I675;
    RmaTransEventHdr  I906;
    RP  I793;
    RmaIbfPcode  I1011;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I675;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I1035;
    U  I1036;
    RmaTransEventHdr  I906;
    RP  I793;
    RmaIbfPcode  I1011;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I1035;
    U  I1036;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I1037;
    RmaTransEventHdr  I906;
    RP  I793;
    RmaIbfPcode  I1011;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I1037;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I796;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1537;
        RP  I1551;
    } I770;
    RmaIbfPcode  I1011;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I796;
    RmaEblk  I715;
    RmaIbfPcode  I1011;
} RmaPortDelay;
typedef struct {
    U  I5;
    RP   I1041[(4)];
} RmaRtlXEdgesHdr;
typedef struct {
    U  I5;
    US  I1042;
    US  I367;
    RP  I1043;
    RP  I1044;
    RP  I1045;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I1046;
    RP  I1047;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I715;
    RP  I1048;
    RP  I1049;
    U  I1050 :16;
    U  I1051 :2;
    U  I1052 :2;
    U  I367 :12;
    U  I470;
    RP  I1053;
    RP   I800[(4)];
    RP   I802[(4)];
    RemoteDbsedLoad   I1054[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I867;
    struct TableAssign_ * I787;
    U  I5;
    U  I1056 :1;
    U  I1057 :1;
    U  I1058 :2;
    U  I1059 :1;
    U  I696 :8;
    U  I1060 :1;
    U  I1061 :1;
    U  I1062 :1;
    U  I1063 :1;
    U  I367 :15;
    RP  ptable;
    RP  I1026;
} TableAssign;
typedef struct TableAssignLayoutOnClk_ {
    struct TableAssignLayoutOnClk_ * I867;
    struct TableAssignLayoutOnClk_ * I787;
    U  I5;
    U  I1056 :1;
    U  I1057 :1;
    U  I1058 :2;
    U  I1059 :1;
    U  I696 :8;
    U  I1060 :1;
    U  I1061 :1;
    U  I1062 :1;
    U  I1063 :1;
    U  I367 :15;
    RP  ptable;
    RmaSeqPrimOutputOnClkS  I1065;
    RmaEblk  I715;
} TableAssignLayoutOnClk;
typedef struct {
    RP  pfn;
    U  state;
    U  I1066;
} RmaSeqPrimOutputOnClkOpt;
typedef struct TableAssignLayoutOnClkOpt_ {
    struct TableAssignLayoutOnClkOpt_ * I867;
    struct TableAssignLayoutOnClkOpt_ * I787;
    U  I5;
    U  I1056 :1;
    U  I1057 :1;
    U  I1058 :2;
    U  I1059 :1;
    U  I696 :8;
    U  I1060 :1;
    U  I1061 :1;
    U  I1062 :1;
    U  I1063 :1;
    U  I367 :15;
    U  I1068;
    RmaSeqPrimOutputOnClkOpt  I1065;
    RmaSeqPrimOutputEblkData  I1069;
} TableAssignLayoutOnClkOpt;
typedef struct {
    U  I5;
    RP  I787;
    RP  I1070;
} RmaTableAssignList;
typedef struct {
    U  I5;
    RP  I787;
    RP  I1070;
    RP  I1071;
    RP  I1020;
    US  I696;
    UB  I963;
    UB  I1072;
    UB  I1073;
    UB  I761;
    RP   I1074[0];
} RmaThreadTableAssignList;
typedef struct {
    RP  I1071;
    RP  I1020;
    US  I696;
    UB  I963;
    UB  I1072;
    UB  I1073;
    UB  I761;
} RmaThreadTableHeader;
typedef struct {
    RP  I1046;
} RmaWakeupListCg;
typedef struct {
    RP  I1046;
} RmaWakeupArrayCg;
typedef struct {
    RP  I1046;
    RP  I1075;
} RmaPreCheckWakeupListCg;
typedef struct {
    RP  I1046;
    RP  I1075;
} RmaPreCheckWakeupArrayCg;
typedef struct {
    U  I1076;
    U  I696;
    RmaTimeStamp   I1077[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I1078;
} RmaConditionsMdb;
typedef struct {
    RP  I1079;
    RP  I1080;
    U  I1081;
} RmaTcListHeader;
typedef struct {
    RP  I867;
    RP  I1082;
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I867;
    RP  I1082;
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1093;
} RmaTcCoreConditional;
typedef struct {
    RP  I867;
    RP  I1082;
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1093;
    RP  I1094;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I867;
    RP  I1082;
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1094;
    RP  I1095;
    U  I1096;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1018;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1093;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1093;
    RP  I1094;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1094;
    RP  I1095;
    U  I1096;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1094;
    RP  I1095;
    RP  I1018;
    U  I1096;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    RP  I1093;
    RP  I1018;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I1083;
    RP  I710;
    U  I1084;
    scalar  I877;
    scalar  I1085;
    US  I1086 :1;
    US  I1087 :1;
    US  I1088 :1;
    US  I1089 :1;
    US  I1090 :1;
    US  I1091 :1;
    US  I1092 :5;
    U  I1098;
    RP  I1099;
    RP  I1100;
    RP  I1093;
    RP  I1101;
    RP  I1102;
    RmaTimeStamp  I1103;
} RmaTcCoreNochange;
typedef struct {
    RP  I1104;
    RP  I867;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I1078;
    RmaTimeStamp  I1105;
    scalar  I1106;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I867;
    RP  I1078;
    RmaTimeStamp  I1105;
    scalar  I1106;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1105;
    scalar  I1106;
    US  I877;
    RP  I1094;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I867;
    RmaTimeStamp  I1105;
    scalar  I1106;
    US  I877;
    RP  I1094;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1094;
    RP  I1107;
    U  I1096;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I1018;
    RP  I1094;
    RP  I1107;
    U  I1096;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I867;
    RP  I1094;
    RP  I1107;
    U  I1096;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1108;
    U  I1109;
    FlatNodeNum  I1110;
    U  I900;
    U  I1111;
    U  I1112;
    RmaIbfPcode  I1011;
    union {
        scalar  I1113;
        vec32  I1114;
        scalar  * I1115;
        vec32  * I1116;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I867;
    RP  I787;
    RP  I1117;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1118;
    U  I1119 :1;
    U  I1120 :1;
    U  I1121 :1;
    U  I1122 :4;
    U  I367 :25;
    U  I1123;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1599;
        RmaSwitchGateInCbkListInfo  I2;
    } I689;
    RmaIbfPcode  I1011;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1124;
    scalar  val;
    scalar  I1125 :1;
    scalar  I1126 :1;
    scalar  I1127 :1;
    scalar  I1128 :1;
    scalar  I1129 :1;
    RP  I800;
    RP  I1130;
    RP  I1110;
    RP  I1131;
    RP  I1132;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1125;
    UB  I1133;
    RmaNonEdgeLoadData1  * I1041;
    RmaNonEdgeLoadData1  * I787;
    void * I1134;
} RmaNonEdgeLoadHdr1;
typedef struct RmaChildClockProp_ {
    RP  I800;
    RP  I1135;
    RP  I1110;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I1041;
    RmaChildClockProp  * I787;
} RmaChildClockPropList1;
typedef struct {
    U  I5;
    U  I1136;
} RmaHDLCosimDUTGate;
struct clock_load {
    U  I181 :5;
    U  I182 :12;
    U  I183 :1;
    U  I184 :2;
    U  I185 :1;
    U  I186 :1;
    U  I187 :1;
    U  I188 :9;
    U  I189;
    U  I190;
    void (* pfn)(void * I192, char val);
};
typedef struct clock_data {
    U  I197 :1;
    U  I198 :1;
    U  I199 :1;
    U  I200 :1;
    U  I181 :5;
    U  I182 :12;
    U  I201 :6;
    U  I202 :1;
    U  I184 :2;
    U  I185 :1;
    U  I188 :1;
    U  I203;
    U  I204;
    U  I205;
    U  I189;
    U  I206;
    U  I207;
    U  I208;
    U  I209;
    U  I210;
} HdbsClockData;
struct clock_hiconn {
    U  I214;
    U  I215;
    U  I189;
    U  I184;
};
typedef struct _RmaDaiCg {
    RP  I1137;
    RP  I1138;
    U  I1139;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I1137;
    RP  I1140;
    RP  I1141;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1142;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I747;
    U   I748[32];
};
struct futq_slot1 {
    U  I744;
    struct futq_slot2  I745[32];
};
struct futq_info {
    scalar  * I739;
    U  I740;
    U  I741;
    struct futq_slot1  I742[32];
};
struct futq {
    struct futq * I729;
    struct futq * I731;
    RmaEblk  * I732;
    RmaEblk  * I733;
    U  I720;
    U  I1;
};
struct sched_table {
    struct futq * I734;
    struct futq I735;
    struct hash_bucket * I736;
    struct hash_bucket * I738;
};
struct dummyq_struct {
    clock_struct  I1146;
    EBLK  * I1147;
    EBLK  * I1148;
    EBLK  * I1149;
    struct futq * I1150;
    struct futq * I1151;
    struct futq * I1152;
    struct sched_table * I1153;
    struct futq_info * I1155;
    struct futq_info * I1157;
    U  I1158;
    U  I1159;
    U  I1160;
    U  I1161;
    U  I1162;
    U  I1163;
    U  I1164;
    struct millenium * I1165;
    EBLK  * I1167;
    EBLK  * I1168;
    EBLK  * I1169;
    EBLK  * I1170;
    EBLK  * I1171;
    EBLK  * I1172;
    EBLK  * I1173;
    EBLK  * I1174;
    EBLK  * I1175;
    EBLK  * I1176;
    EBLK  * I1177;
    EBLK  * I1178;
    EBLK  * I1179;
    EBLK  * I1180;
    EBLK  * I1181;
    EBLK  * I1182;
    EBLK  * I1183;
    EBLK  * I1184;
    MPS  * I1185;
    struct retain_t * I1186;
    EBLK  * I1187;
    EBLK  * I1188;
    EBLK  * I1189;
    EBLK  * I1190;
    EBLK  * I1191;
    EBLK  * I1192;
    EBLK  * I1193;
    EBLK  * I1194;
    EBLK  * I1195;
    EBLK  * I1196;
    EBLK  * I1197;
    EBLK  * I1198;
    EBLK  * I1199;
    EBLK  * I1200;
    EBLK  * I1201;
    EBLK  * I1202;
    EBLK  * I1203;
    EBLK  * I1204;
    EBLK  * I1205;
    EBLK  * I1206;
    EBLK  * I1207;
    EBLK  * I1208;
    EBLK  * I1209;
    EBLK  * I1210;
    EBLK  * I1211;
    EBLK  * I1212;
    EBLK  I1213;
    EBLK  * I1214;
    EBLK  * I1215;
    EBLK  * I1216;
    EBLK  * I1217;
    int I1218;
    int I1219;
    struct vcs_globals_t * I1220;
    clock_struct  I1221;
    unsigned long long I1222;
    EBLK  * I1223;
    EBLK  * I1224;
    void * I1225;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    EBLK  * I716;
    EBLK  * I1226;
    int I1227;
    struct _lqueue * I758;
} Queue;
typedef struct {
    void * I1229;
    void * I1230;
    void * I1231[2];
    void * I1232;
} ClkLevel;
typedef struct {
    unsigned long long I1233;
    EBLK  I1234;
    U  I1235;
    U  I1236;
    union {
        void * pHeap;
        Queue  * pList;
    } I689;
    unsigned long long I1237;
    ClkLevel  I1238;
    Queue   I1239[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern __thread unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern UP   rmaFunctionRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern __thread UB  dummyScalar;
extern __thread UB  fScalarIsForced;
extern __thread UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern U  fFsdbDumpOn;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern U  * vcs_ptableOffsetsGbl;
extern UB  * expandedClkValues;
extern __thread Qhdr  * lvlQueue;
extern __thread unsigned threadIndex;
extern int cPeblkThreads;
extern US   xedges[];
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern U  fFutEventPRL;
extern U  fParallelEBLK;
extern U  fBufferingEvent;
extern __thread UB  fNettypeIsForced;
extern __thread UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern U  fHsimTcheckOpt;
extern scalar   edgeChangeLookUp[4][4];
extern U  fDoingTime0Prop;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(EBLK *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void AddToClkGLitchArray(EBLK*);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void sched0sd_hsim_PRL(UB* peblk);
extern void sched0lq_parallel_clk(EBLK* peblk);
extern U    isRtlClockScheduled(EBLK* peblk);
extern void doFgpRaceCheck(UB* pcode, UB* p, U flag);
extern void doSanityLvlCheck();
extern void sched0lq_parallel_ova(EBLK* peblk);
extern void sched0lq_parallel_ova_precheck(EBLK* peblk);
extern void rmaDlpEvalSeqPrim(UB* peblk, UB val, UB preval);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimCountXEdges(void* record,  scalar s);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset, U gd_info, U encodeInPcode, void* propValue);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void *VCSCalloc(size_t size, size_t count);
extern void *VCSMalloc(size_t size);
extern void VCSFree(void *ptr);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4, scalar master4val);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U fNonEdgeLoad, UB* plist, UB* pprevlist, scalar v);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern void rmaEvalSeqPrimLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void rmaEvalSeqPrimLoadsByteArrayX(UB* pcode, UB val, UB prevval4);
extern void vcsRmaEvalSeqPrimLoadsByteArraySCT(UB* pcode, UB val, UB prevval4, U c);
extern void vcsAbortForBadEBlk(void);
extern scalar edgeChangeLookUp[4][4];
extern void Wsvvar_sched_virt_intf_eval(RP* ptr);
extern void vcs_hwcosim_drive_dut_scalar(uint id, char val);
extern void vcs_hwcosim_drive_dut_vector_4state(uint id, vec32* val);
extern U vcs_rmaGetClkValForSeqUdpLayoutOnClkOpt(UB* poutput);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
#if !defined(__aarch64__)
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
#else
    out = ffs(in) - 1;
#endif
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hs_0_M_0_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_0_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_1_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_1_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_2_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_2_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_3_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_3_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_4_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_5_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_5_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_6_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_7_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_8_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_9_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_10_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_11_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_11_5__simv_daidir (UB  * pcode, U  I900);
void  hs_0_M_12_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_13_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_14_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_14_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_15_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_16_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_16_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_17_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_17_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_18_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_18_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_18_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_19_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_19_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_20_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_20_6__simv_daidir (UB  * pcode, scalar  val, U  I877);
void  hs_0_M_20_7__simv_daidir (UB  * pcode, vec32  * I1326, U  I877, U  I1335);
void  hs_0_M_20_10__simv_daidir (UB  * pcode, vec32  * I987);
void  hs_0_M_21_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_22_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_22_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_23_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_23_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_24_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_25_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_25_5__simv_daidir (UB  * pcode, U  I900);
void  hs_0_M_26_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_26_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_27_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_27_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_28_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_28_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_29_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_29_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_30_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_31_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_31_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_32_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_33_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_33_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_34_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_34_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_35_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_36_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_37_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_38_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_38_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_39_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_40_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_41_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_42_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_43_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_44_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_45_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_46_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_47_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_48_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_48_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_49_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_50_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_51_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_52_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_52_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_53_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_54_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_55_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_55_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_56_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_57_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_58_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_59_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_60_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_61_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_61_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_62_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_62_6__simv_daidir (UB  * pcode, scalar  val, U  I877);
void  hs_0_M_62_7__simv_daidir (UB  * pcode, vec32  * I1326, U  I877, U  I1335);
void  hs_0_M_62_10__simv_daidir (UB  * pcode, vec32  * I987);
void  hs_0_M_63_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_64_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_64_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_64_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_65_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_65_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_66_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_66_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_67_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_67_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_68_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_68_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_69_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_69_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_70_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_70_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_71_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_72_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_73_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_74_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_75_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_76_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_76_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_77_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_78_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_78_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_79_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_79_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_80_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_81_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_82_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_83_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_83_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_84_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_85_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_86_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_87_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_88_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_89_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_89_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_90_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_91_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_92_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_93_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_94_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_95_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_96_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_97_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_97_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_98_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_98_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_99_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_100_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_101_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_101_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_102_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_102_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_102_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_103_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_104_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_104_6__simv_daidir (UB  * pcode, scalar  val, U  I877);
void  hs_0_M_104_7__simv_daidir (UB  * pcode, vec32  * I1326, U  I877, U  I1335);
void  hs_0_M_104_10__simv_daidir (UB  * pcode, vec32  * I987);
void  hs_0_M_105_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_106_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_107_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_108_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_109_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_109_6__simv_daidir (UB  * pcode, scalar  val, U  I877);
void  hs_0_M_109_7__simv_daidir (UB  * pcode, vec32  * I1326, U  I877, U  I1335);
void  hs_0_M_109_10__simv_daidir (UB  * pcode, vec32  * I987);
void  hs_0_M_110_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_111_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_112_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_113_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_114_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_114_6__simv_daidir (UB  * pcode, scalar  val, U  I877);
void  hs_0_M_114_7__simv_daidir (UB  * pcode, vec32  * I1326, U  I877, U  I1335);
void  hs_0_M_114_10__simv_daidir (UB  * pcode, vec32  * I987);
void  hs_0_M_115_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_116_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_117_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_118_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_119_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_119_6__simv_daidir (UB  * pcode, scalar  val, U  I877);
void  hs_0_M_119_7__simv_daidir (UB  * pcode, vec32  * I1326, U  I877, U  I1335);
void  hs_0_M_119_10__simv_daidir (UB  * pcode, vec32  * I987);
void  hs_0_M_120_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_121_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_122_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_123_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_124_0__simv_daidir (UB  * pcode, vec32  * I987, U  I900);
void  hs_0_M_124_6__simv_daidir (UB  * pcode, scalar  val, U  I877);
void  hs_0_M_124_7__simv_daidir (UB  * pcode, vec32  * I1326, U  I877, U  I1335);
void  hs_0_M_124_10__simv_daidir (UB  * pcode, vec32  * I987);
void  hsG_0__0 (struct dummyq_struct * I1253, EBLK  * I1247, U  I675);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

